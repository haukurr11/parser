FIRST(identifier_list) = {id}

FIRST(identifier_list´) = {, ,ε}

FIRST(declarations) = {var, ε}

FIRST(type) = FIRST(standard_type) + {array} = {integer,real,array}

FIRST(standard_type) = {integer,real}

FIRST(subprogram_declarations) =
           FIRST(subprogram_declaration)
          + {ε}
          = FIRST(subprogram_head) = {function, procedure}

FIRST(subprogram_declaration) = FIRST(subprogram_head) = {function, procedure,ε}

FIRST(subprogram_head) = {function, procedure}

FIRST(arguments) = { ( , ε}

FIRST(parameter_list) = FIRST(identifier_list) = {id}

FIRST(parameter_list´) = {; , ε}


FIRST(compound_statement) = {begin}

FIRST(optional_statements) = FIRST(statement_list) + {ε}
                           = {begin, id, if, while, ε}

FIRST(statement_list) = FIRST(statement) = {begin, id, if, while}

FIRST(statement_list´) = {; , ε}

FIRST(statement) = FIRST(compound_statement) + {id, if, while} = {begin, id, if, while}

FIRST(statement´) = {assignop, [, (, ε}

FIRST(variable) = {id}
FIRST(variable´) = {[, ε}

FIRST(procedure_statement) = {id}
FIRST(procedure_statement´) = {(, ε}

FIRST(expression_list) = FIRST(expression) = {id,num,(,not,+,-}

FIRST(expression) = FIRST(simple_expression) = {id,num,(,not,+,-}
FIRST(expression´) = {relop, ε}

FIRST(simple_expression) = FIRST(term) + FIRST(sign)
                         = {id,num,(,not} + {+,-}
                         = {id,num,(,not,+,-}

FIRST(simple_expression´) = {addop,ε}

FIRST(term) = FIRST(factor) = {id,num,(,not}

FIRST(term´) = {mulop,ε}

FIRST(factor) = {id,num,(,not}
FIRST(factor´) = {[,(,ε}

FIRST(sign) = {+,-}




FOLLOW(identifier_list) = {:}

FOLLOW(identifier_list´) = {:}

FOLLOW(declarations) = FIRST(subprogram_declarations)
                     + FIRST(compound_statement)
                     = {function, procedure} + { begin }
                     = {function,procedure,begin}

FOLLOW(type) = FIRST(parameter_list´) + {;} 
             = {ε,;}
             = FOLLOW(parameter_list) + {;} 
             = {),;}

FOLLOW(standard_type) = FOLLOW(type) 
                      = {),;}

FOLLOW(subprogram_declarations) = FIRST(compound_statement)
                                = {begin}

FOLLOW(subprogram_declaration) = {;}

FOLLOW(subprogram_head) = FIRST(compound_statement) + FIRST(declarations) = {var, begin}

FOLLOW(arguments) = {:,;}

FOLLOW(compound_statement) = {.} + FOLLOW(subprogram_declaration)
                           = {.} {;}
                           = {.,;}

FOLLOW(optional_statements) = {end}

FOLLOW(statement_list) = FOLLOW(optional_statements) = {end}

FOLLOW(statement) = FIRST(StatementListPrime) + FOLLOW(StatementList) = {;}+{end} = {;,end}

FOLLOW(variable) = {}

FOLLOW(procedure_statement) = {}

FOLLOW(expression_list) = {)}

FOLLOW(expression) = { then,do,],), , }

FOLLOW(simple_expression) = FIRST(expression´)
                          + FOLLOW(expression´)
                          {relop, then,do,],), , }

FOLLOW(term) = FIRST(simple_expression´)
             + FOLLOW(simple_expression´)
             = {addop,relop, then,do,],), , }


FOLLOW(factor) = FIRST(term´)
               + FOLLOW(term´)
               = {mulop,addop,relop, then,do,],), , }



